Basics
======

A widget is the base class of all GUI objects

Widgets only ever render to themselves, through a function render()
    * Render has one argument, the size of the render. This is the space given to the widget.
    * A widget may be allocated more space due to it's expand args, or because there is more space generally.
    * When a widget is rendered to a size N, it will create a texture of that size, although it may not use all of it
    * A widgets texture is always None until it is rendered.
    * All widgets have a background color which is always drawn if it exists
    * Widgets keep a record of the size of the last texture, so they do not need to redraw
    * Widget also keeps an offset of its position compared to the root frame
    * Every widget has a min_size(), which reports the minimum size of the widget.
    * When we align a widget, like say a button, we don't want the button click to register against other items
    * So we need to also remember an "action area" that records the area we respond to for mouse events
        * In this way, the main loop only needs to check the action area for clicks
        * The actual mouse area would be the frame position + widget frame offset + action area

Containers manage and contain other widgets
    * A container has the property "container" set to true (other widgets are false)
    * A container has a property "children" which returns all children
    * A container has to distribute the space it is given to its child widgets
    * Containers also have background colors, align, fill properties
    * It makes no sense for a container to expand, this is set by its children


Notes:
    Really there are 2 types of containers
        The container that fits over the whole screen is hard-fixed.
        The one representing a floating window can and will change
    But the main point is they always have a size.
        A container HBox will spread out the horizontal axis based on the children;
            However it's height will be the whatever the max height of the child widgets are
            We choose that when rendering all the widgets, we offer them all the space we have for them
            This may be more than they need. In this case we use "align" and "fill" to decode what to do
            What does "fill" mean? To say "you can use this space" is to delegate responsibilty.
                What are we really saying to the widget, and what do we want?
                Really, we are saying is "choose how to fill this space"
                Well you could just align it
            There's always a fixed size at the end, so having something expand is reasonable.
            Because I work with rectangles, fill seems required. But really, what other widgets would know how to fill?
                1   Button      - Can, but would look terrible
                0   Label
                0   Checkbox
                0   Radio
                0.5 Slider      - Only in 1 dimension, and almost by default
                1.0 TextEdit    - But why would it not be expanding anyway?
                0.0 Icons
                0.0
            Against this, we could have growing or non-growing rectangles - the point is, we can put this code
                into the ColorRect code rather than have it in places where it makes no sense
                After all, that's the point of OO right?

            Margin means "draw some space around me"
            Expand means "give me all the space you can, I know what to draw"
            Align means "here's how I fit in that space"
            On top of that, we have "Spacers"
                These consume space and render nothing, enabling control over alignment.

        Should we have a "minimum size", i.e. a defined value that it can never go below?
            we can make this work by using it as the minimum render size

Frames are top level widgets. They always contain one child.
    * Frames are allocated a size, and a position.
    * If the size is changed, then the widget must be redrawn
